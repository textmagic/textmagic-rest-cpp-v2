/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SendPhoneVerificationCodeInputObject.h
 *
 * 
 */

#ifndef COM_TEXTMAGIC_CLIENT_MODEL_SendPhoneVerificationCodeInputObject_H_
#define COM_TEXTMAGIC_CLIENT_MODEL_SendPhoneVerificationCodeInputObject_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace textmagic {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SendPhoneVerificationCodeInputObject
    : public ModelBase
{
public:
    SendPhoneVerificationCodeInputObject();
    virtual ~SendPhoneVerificationCodeInputObject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SendPhoneVerificationCodeInputObject members

    /// <summary>
    /// Use the phone number in international E.164 format. If you need to pass phone numbers in the local format, please use them with the **country** parameter to specify the origin country of the phone number. 
    /// </summary>
    utility::string_t getPhone() const;
        void setPhone(utility::string_t value);
    /// <summary>
    /// Alphanumeric string with up to 18 characters you can use to personalize the verification text message body, to help users identify your company or application name. For example: “Your TextMagic PIN is …” 
    /// </summary>
    utility::string_t getBrand() const;
        void setBrand(utility::string_t value);
    /// <summary>
    /// The length of the verification code. The value can be 4 or 6 characters. 
    /// </summary>
    int32_t getCodeLength() const;
        void setCodeLength(int32_t value);
    /// <summary>
    /// By default, the SMS or text-to-speech (TTS) voice message is generated in the locale that matches the number. For example, the text message or TTS message for a 33\\* number is sent in French. Use this parameter to explicitly control the language, accent, and gender used for the verification request.Can be one of the following: &#x60;de-de&#x60;, &#x60;en-au&#x60;, &#x60;en-gb&#x60;, &#x60;en-us&#x60;, &#x60;en-in&#x60;, &#x60;es-es&#x60;, &#x60;es-mx&#x60;, &#x60;es-us&#x60;, &#x60;fr-ca&#x60;, &#x60;fr-fr&#x60;, &#x60;is-is&#x60;, &#x60;it-it&#x60;, &#x60;ja-jp&#x60;, &#x60;ko-kr&#x60;, &#x60;nl-nl&#x60;, &#x60;pl-pl&#x60;, &#x60;pt-pt&#x60;, &#x60;pt-br&#x60;, &#x60;ro-ro&#x60;, &#x60;ru-ru&#x60;, &#x60;sv-se&#x60;, &#x60;tr-tr&#x60;, &#x60;zh-cn&#x60; or &#x60;zh-tw&#x60;. 
    /// </summary>
    utility::string_t getLanguage() const;
    bool languageIsSet() const;
    void unsetLanguage();
    void setLanguage(utility::string_t value);
    /// <summary>
    /// One of the available [sender settings](https://my.textmagic.com/online/reply-options/) on your TextMagic account. If specified sender setting type is not allowed for some destinations, a fallback default sender will be used to ensure the message delivery. More info about known restrictions can be found [here](https://support.textmagic.com/article/how-to-understand-sender-setting-restrictions/). 
    /// </summary>
    utility::string_t getSenderId() const;
    bool senderIdIsSet() const;
    void unsetSenderId();
    void setSenderId(utility::string_t value);
    /// <summary>
    /// 2-letter ISO country code for local phone number.
    /// </summary>
    utility::string_t getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();
    void setCountry(utility::string_t value);

protected:
    utility::string_t m_Phone;
        utility::string_t m_Brand;
        int32_t m_CodeLength;
        utility::string_t m_Language;
    bool m_LanguageIsSet;
    utility::string_t m_SenderId;
    bool m_SenderIdIsSet;
    utility::string_t m_Country;
    bool m_CountryIsSet;
};

}
}
}
}

#endif /* COM_TEXTMAGIC_CLIENT_MODEL_SendPhoneVerificationCodeInputObject_H_ */
