/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * GetContactsAutocompleteResponseItem.h
 *
 * 
 */

#ifndef COM_TEXTMAGIC_CLIENT_MODEL_GetContactsAutocompleteResponseItem_H_
#define COM_TEXTMAGIC_CLIENT_MODEL_GetContactsAutocompleteResponseItem_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace textmagic {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  GetContactsAutocompleteResponseItem
    : public ModelBase
{
public:
    GetContactsAutocompleteResponseItem();
    virtual ~GetContactsAutocompleteResponseItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GetContactsAutocompleteResponseItem members

    /// <summary>
    /// Id of entity. 0 if object is a Reply
    /// </summary>
    int32_t getEntityId() const;
        void setEntityId(int32_t value);
    /// <summary>
    /// Entry type: * **contact** if it is related to a contact * **list** if it is related to a contact list * **reply** if it is related to an incoming message 
    /// </summary>
    utility::string_t getEntityType() const;
        void setEntityType(utility::string_t value);
    /// <summary>
    /// Id of contact/list if entityType is contact/list OR phone number if entityType is reply.
    /// </summary>
    utility::string_t getValue() const;
        void setValue(utility::string_t value);
    /// <summary>
    /// Name of the contact/list if entityType is contact/list OR phone number if entityType is reply.
    /// </summary>
    utility::string_t getLabel() const;
        void setLabel(utility::string_t value);
    /// <summary>
    /// If contact or list was shared by another sub-account then name if this user will be shown.
    /// </summary>
    utility::string_t getSharedBy() const;
        void setSharedBy(utility::string_t value);
    /// <summary>
    /// Contact avatar URI.
    /// </summary>
    utility::string_t getAvatar() const;
        void setAvatar(utility::string_t value);
    /// <summary>
    /// If contact has been marked as favorite.
    /// </summary>
    bool isFavorited() const;
        void setFavorited(bool value);
    /// <summary>
    /// Owner id of the contact/list (if it was shared).
    /// </summary>
    int32_t getUserId() const;
        void setUserId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountryName() const;
        void setCountryName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getQposition() const;
        void setQposition(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getRposition() const;
        void setRposition(int32_t value);

protected:
    int32_t m_EntityId;
        utility::string_t m_EntityType;
        utility::string_t m_Value;
        utility::string_t m_Label;
        utility::string_t m_SharedBy;
        utility::string_t m_Avatar;
        bool m_Favorited;
        int32_t m_UserId;
        utility::string_t m_CountryName;
        int32_t m_Qposition;
        int32_t m_Rposition;
    };

}
}
}
}

#endif /* COM_TEXTMAGIC_CLIENT_MODEL_GetContactsAutocompleteResponseItem_H_ */
