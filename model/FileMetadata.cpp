/**
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FileMetadata.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

FileMetadata::FileMetadata()
{
    m_Type = utility::conversions::to_string_t("");
    m_Height = 0;
    m_Width = 0;
}

FileMetadata::~FileMetadata()
{
}

void FileMetadata::validate()
{
    // TODO: implement validation
}

web::json::value FileMetadata::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    val[utility::conversions::to_string_t("height")] = ModelBase::toJson(m_Height);
    val[utility::conversions::to_string_t("width")] = ModelBase::toJson(m_Width);
    val[utility::conversions::to_string_t("preview")] = ModelBase::toJson(m_Preview);

    return val;
}

void FileMetadata::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("height")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("height")];
        if(!fieldValue.is_null())
        {
            setHeight(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("width")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("width")];
        if(!fieldValue.is_null())
        {
            setWidth(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("preview")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("preview")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FileMetadataPreview> newItem(new FileMetadataPreview());
            newItem->fromJson(fieldValue);
            setPreview( newItem );
        }
    }
}

void FileMetadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("height"), m_Height));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("width"), m_Width));
    m_Preview->toMultipart(multipart, utility::conversions::to_string_t("preview."));
}

void FileMetadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    setHeight(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("height"))));
    setWidth(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("width"))));
    std::shared_ptr<FileMetadataPreview> newPreview(new FileMetadataPreview());
    newPreview->fromMultiPart(multipart, utility::conversions::to_string_t("preview."));
    setPreview( newPreview );
}

utility::string_t FileMetadata::getType() const
{
    return m_Type;
}


void FileMetadata::setType(utility::string_t value)
{
    m_Type = value;
    
}
int32_t FileMetadata::getHeight() const
{
    return m_Height;
}


void FileMetadata::setHeight(int32_t value)
{
    m_Height = value;
    
}
int32_t FileMetadata::getWidth() const
{
    return m_Width;
}


void FileMetadata::setWidth(int32_t value)
{
    m_Width = value;
    
}
std::shared_ptr<FileMetadataPreview> FileMetadata::getPreview() const
{
    return m_Preview;
}


void FileMetadata::setPreview(std::shared_ptr<FileMetadataPreview> value)
{
    m_Preview = value;
    
}
}
}
}
}

