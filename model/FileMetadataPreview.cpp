/**
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FileMetadataPreview.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

FileMetadataPreview::FileMetadataPreview()
{
    m_Height = 0;
    m_Width = 0;
}

FileMetadataPreview::~FileMetadataPreview()
{
}

void FileMetadataPreview::validate()
{
    // TODO: implement validation
}

web::json::value FileMetadataPreview::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("height")] = ModelBase::toJson(m_Height);
    val[utility::conversions::to_string_t("width")] = ModelBase::toJson(m_Width);

    return val;
}

void FileMetadataPreview::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("height")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("height")];
        if(!fieldValue.is_null())
        {
            setHeight(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("width")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("width")];
        if(!fieldValue.is_null())
        {
            setWidth(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void FileMetadataPreview::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("height"), m_Height));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("width"), m_Width));
}

void FileMetadataPreview::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setHeight(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("height"))));
    setWidth(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("width"))));
}

int32_t FileMetadataPreview::getHeight() const
{
    return m_Height;
}


void FileMetadataPreview::setHeight(int32_t value)
{
    m_Height = value;
    
}
int32_t FileMetadataPreview::getWidth() const
{
    return m_Width;
}


void FileMetadataPreview::setWidth(int32_t value)
{
    m_Width = value;
    
}
}
}
}
}

