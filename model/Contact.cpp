/**
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Contact.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

Contact::Contact()
{
    m_Id = 0;
    m_Favorited = false;
    m_Blocked = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_LastName = utility::conversions::to_string_t("");
    m_CompanyName = utility::conversions::to_string_t("");
    m_Phone = utility::conversions::to_string_t("");
    m_Email = utility::conversions::to_string_t("");
    m_OwnerIsSet = false;
    m_TagsIsSet = false;
    m_PhoneType = utility::conversions::to_string_t("");
    m_WhatsappPhone = utility::conversions::to_string_t("");
    m_WhatsappPhoneIsSet = false;
}

Contact::~Contact()
{
}

void Contact::validate()
{
    // TODO: implement validation
}

web::json::value Contact::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("favorited")] = ModelBase::toJson(m_Favorited);
    val[utility::conversions::to_string_t("blocked")] = ModelBase::toJson(m_Blocked);
    val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    val[utility::conversions::to_string_t("companyName")] = ModelBase::toJson(m_CompanyName);
    val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_CustomFields )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("customFields")] = web::json::value::array(jsonArray);
    }
    val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Lists )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("lists")] = web::json::value::array(jsonArray);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t("owner")] = ModelBase::toJson(m_Owner);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("tags")] = web::json::value::array(jsonArray);
        }
    }
    val[utility::conversions::to_string_t("phoneType")] = ModelBase::toJson(m_PhoneType);
    val[utility::conversions::to_string_t("avatar")] = ModelBase::toJson(m_Avatar);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Notes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("notes")] = web::json::value::array(jsonArray);
    }
    if(m_WhatsappPhoneIsSet)
    {
        val[utility::conversions::to_string_t("whatsappPhone")] = ModelBase::toJson(m_WhatsappPhone);
    }

    return val;
}

void Contact::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("favorited")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("favorited")];
        if(!fieldValue.is_null())
        {
            setFavorited(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blocked")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("blocked")];
        if(!fieldValue.is_null())
        {
            setBlocked(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("companyName")];
        if(!fieldValue.is_null())
        {
            setCompanyName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phone")];
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("email")];
        if(!fieldValue.is_null())
        {
            setEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> newItem(new Country());
            newItem->fromJson(fieldValue);
            setCountry( newItem );
        }
    }
    {
        m_CustomFields.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("customFields")))
        {
        for( auto& item : val[utility::conversions::to_string_t("customFields")].as_array() )
        {
            if(item.is_null())
            {
                m_CustomFields.push_back( std::shared_ptr<CustomFieldListItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<CustomFieldListItem> newItem(new CustomFieldListItem());
                newItem->fromJson(item);
                m_CustomFields.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromJson(fieldValue);
            setUser( newItem );
        }
    }
    {
        m_Lists.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("lists")))
        {
        for( auto& item : val[utility::conversions::to_string_t("lists")].as_array() )
        {
            if(item.is_null())
            {
                m_Lists.push_back( std::shared_ptr<List>(nullptr) );
            }
            else
            {
                std::shared_ptr<List> newItem(new List());
                newItem->fromJson(item);
                m_Lists.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("owner")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("owner")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromJson(fieldValue);
            setOwner( newItem );
        }
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("tags")))
        {
        for( auto& item : val[utility::conversions::to_string_t("tags")].as_array() )
        {
            if(item.is_null())
            {
                m_Tags.push_back( std::shared_ptr<Tag>(nullptr) );
            }
            else
            {
                std::shared_ptr<Tag> newItem(new Tag());
                newItem->fromJson(item);
                m_Tags.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phoneType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phoneType")];
        if(!fieldValue.is_null())
        {
            setPhoneType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avatar")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ContactImage> newItem(new ContactImage());
            newItem->fromJson(fieldValue);
            setAvatar( newItem );
        }
    }
    {
        m_Notes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("notes")))
        {
        for( auto& item : val[utility::conversions::to_string_t("notes")].as_array() )
        {
            if(item.is_null())
            {
                m_Notes.push_back( std::shared_ptr<ContactNote>(nullptr) );
            }
            else
            {
                std::shared_ptr<ContactNote> newItem(new ContactNote());
                newItem->fromJson(item);
                m_Notes.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("whatsappPhone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("whatsappPhone")];
        if(!fieldValue.is_null())
        {
            setWhatsappPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Contact::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("favorited"), m_Favorited));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("blocked"), m_Blocked));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyName"), m_CompanyName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    m_Country->toMultipart(multipart, utility::conversions::to_string_t("country."));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_CustomFields )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customFields"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    m_User->toMultipart(multipart, utility::conversions::to_string_t("user."));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Lists )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lists"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    if(m_OwnerIsSet)
    {
        if (m_Owner.get())
        {
            m_Owner->toMultipart(multipart, utility::conversions::to_string_t("owner."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phoneType"), m_PhoneType));
    m_Avatar->toMultipart(multipart, utility::conversions::to_string_t("avatar."));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Notes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notes"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    if(m_WhatsappPhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("whatsappPhone"), m_WhatsappPhone));
        
    }
}

void Contact::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setFavorited(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("favorited"))));
    setBlocked(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("blocked"))));
    setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    setCompanyName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyName"))));
    setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    std::shared_ptr<Country> newCountry(new Country());
    newCountry->fromMultiPart(multipart, utility::conversions::to_string_t("country."));
    setCountry( newCountry );
    {
        m_CustomFields.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("customFields"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_CustomFields.push_back( std::shared_ptr<CustomFieldListItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<CustomFieldListItem> newItem(new CustomFieldListItem());
                newItem->fromJson(item);
                m_CustomFields.push_back( newItem );
            }
        }
    }
    std::shared_ptr<User> newUser(new User());
    newUser->fromMultiPart(multipart, utility::conversions::to_string_t("user."));
    setUser( newUser );
    {
        m_Lists.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lists"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Lists.push_back( std::shared_ptr<List>(nullptr) );
            }
            else
            {
                std::shared_ptr<List> newItem(new List());
                newItem->fromJson(item);
                m_Lists.push_back( newItem );
            }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("owner")))
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("owner."));
            setOwner( newItem );
        }
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Tags.push_back( std::shared_ptr<Tag>(nullptr) );
            }
            else
            {
                std::shared_ptr<Tag> newItem(new Tag());
                newItem->fromJson(item);
                m_Tags.push_back( newItem );
            }
        }
        }
    }
    setPhoneType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phoneType"))));
    std::shared_ptr<ContactImage> newAvatar(new ContactImage());
    newAvatar->fromMultiPart(multipart, utility::conversions::to_string_t("avatar."));
    setAvatar( newAvatar );
    {
        m_Notes.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("notes"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Notes.push_back( std::shared_ptr<ContactNote>(nullptr) );
            }
            else
            {
                std::shared_ptr<ContactNote> newItem(new ContactNote());
                newItem->fromJson(item);
                m_Notes.push_back( newItem );
            }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("whatsappPhone")))
    {
        setWhatsappPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("whatsappPhone"))));
    }
}

int32_t Contact::getId() const
{
    return m_Id;
}


void Contact::setId(int32_t value)
{
    m_Id = value;
    
}
bool Contact::isFavorited() const
{
    return m_Favorited;
}


void Contact::setFavorited(bool value)
{
    m_Favorited = value;
    
}
bool Contact::isBlocked() const
{
    return m_Blocked;
}


void Contact::setBlocked(bool value)
{
    m_Blocked = value;
    
}
utility::string_t Contact::getFirstName() const
{
    return m_FirstName;
}


void Contact::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    
}
utility::string_t Contact::getLastName() const
{
    return m_LastName;
}


void Contact::setLastName(utility::string_t value)
{
    m_LastName = value;
    
}
utility::string_t Contact::getCompanyName() const
{
    return m_CompanyName;
}


void Contact::setCompanyName(utility::string_t value)
{
    m_CompanyName = value;
    
}
utility::string_t Contact::getPhone() const
{
    return m_Phone;
}


void Contact::setPhone(utility::string_t value)
{
    m_Phone = value;
    
}
utility::string_t Contact::getEmail() const
{
    return m_Email;
}


void Contact::setEmail(utility::string_t value)
{
    m_Email = value;
    
}
std::shared_ptr<Country> Contact::getCountry() const
{
    return m_Country;
}


void Contact::setCountry(std::shared_ptr<Country> value)
{
    m_Country = value;
    
}
std::vector<std::shared_ptr<CustomFieldListItem>>& Contact::getCustomFields()
{
    return m_CustomFields;
}

void Contact::setCustomFields(std::vector<std::shared_ptr<CustomFieldListItem>> value)
{
    m_CustomFields = value;
    
}
std::shared_ptr<User> Contact::getUser() const
{
    return m_User;
}


void Contact::setUser(std::shared_ptr<User> value)
{
    m_User = value;
    
}
std::vector<std::shared_ptr<List>>& Contact::getLists()
{
    return m_Lists;
}

void Contact::setLists(std::vector<std::shared_ptr<List>> value)
{
    m_Lists = value;
    
}
std::shared_ptr<User> Contact::getOwner() const
{
    return m_Owner;
}


void Contact::setOwner(std::shared_ptr<User> value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}
bool Contact::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void Contact::unsetOwner()
{
    m_OwnerIsSet = false;
}

std::vector<std::shared_ptr<Tag>>& Contact::getTags()
{
    return m_Tags;
}

void Contact::setTags(std::vector<std::shared_ptr<Tag>> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool Contact::tagsIsSet() const
{
    return m_TagsIsSet;
}

void Contact::unsetTags()
{
    m_TagsIsSet = false;
}

utility::string_t Contact::getPhoneType() const
{
    return m_PhoneType;
}


void Contact::setPhoneType(utility::string_t value)
{
    m_PhoneType = value;
    
}
std::shared_ptr<ContactImage> Contact::getAvatar() const
{
    return m_Avatar;
}


void Contact::setAvatar(std::shared_ptr<ContactImage> value)
{
    m_Avatar = value;
    
}
std::vector<std::shared_ptr<ContactNote>>& Contact::getNotes()
{
    return m_Notes;
}

void Contact::setNotes(std::vector<std::shared_ptr<ContactNote>> value)
{
    m_Notes = value;
    
}
utility::string_t Contact::getWhatsappPhone() const
{
    return m_WhatsappPhone;
}


void Contact::setWhatsappPhone(utility::string_t value)
{
    m_WhatsappPhone = value;
    m_WhatsappPhoneIsSet = true;
}
bool Contact::whatsappPhoneIsSet() const
{
    return m_WhatsappPhoneIsSet;
}

void Contact::unsetWhatsappPhone()
{
    m_WhatsappPhoneIsSet = false;
}

}
}
}
}

