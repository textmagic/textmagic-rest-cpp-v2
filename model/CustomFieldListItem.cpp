/**
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CustomFieldListItem.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

CustomFieldListItem::CustomFieldListItem()
{
    m_Id = 0;
    m_UserCustomFieldId = 0;
    m_Name = utility::conversions::to_string_t("");
    m_Value = utility::conversions::to_string_t("");
    m_CreatedAt = utility::datetime();
}

CustomFieldListItem::~CustomFieldListItem()
{
}

void CustomFieldListItem::validate()
{
    // TODO: implement validation
}

web::json::value CustomFieldListItem::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("userCustomFieldId")] = ModelBase::toJson(m_UserCustomFieldId);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);

    return val;
}

void CustomFieldListItem::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userCustomFieldId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("userCustomFieldId")];
        if(!fieldValue.is_null())
        {
            setUserCustomFieldId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("value")];
        if(!fieldValue.is_null())
        {
            setValue(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("createdAt")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
}

void CustomFieldListItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userCustomFieldId"), m_UserCustomFieldId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
}

void CustomFieldListItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setUserCustomFieldId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("userCustomFieldId"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setValue(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
    setCreatedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt"))));
}

int32_t CustomFieldListItem::getId() const
{
    return m_Id;
}


void CustomFieldListItem::setId(int32_t value)
{
    m_Id = value;
    
}
int32_t CustomFieldListItem::getUserCustomFieldId() const
{
    return m_UserCustomFieldId;
}


void CustomFieldListItem::setUserCustomFieldId(int32_t value)
{
    m_UserCustomFieldId = value;
    
}
utility::string_t CustomFieldListItem::getName() const
{
    return m_Name;
}


void CustomFieldListItem::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t CustomFieldListItem::getValue() const
{
    return m_Value;
}


void CustomFieldListItem::setValue(utility::string_t value)
{
    m_Value = value;
    
}
utility::datetime CustomFieldListItem::getCreatedAt() const
{
    return m_CreatedAt;
}


void CustomFieldListItem::setCreatedAt(utility::datetime value)
{
    m_CreatedAt = value;
    
}
}
}
}
}

