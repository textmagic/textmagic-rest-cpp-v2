/**
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Conversation.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

Conversation::Conversation()
{
    m_Id = 0;
    m_Direction = utility::conversions::to_string_t("");
    m_Sender = utility::conversions::to_string_t("");
    m_MessageTime = utility::datetime();
    m_Text = utility::conversions::to_string_t("");
    m_Receiver = utility::conversions::to_string_t("");
    m_Status = utility::conversions::to_string_t("");
    m_FirstName = utility::conversions::to_string_t("");
    m_LastName = utility::conversions::to_string_t("");
    m_SessionId = 0;
    m_InitiatorId = 0;
    m_InitiatorIdIsSet = false;
    m_MessageFileId = 0;
    m_MessageFileIdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_ChatType = utility::conversions::to_string_t("");
    m_ChatTypeIsSet = false;
    m_ChatId = 0;
    m_ChatIdIsSet = false;
    m_IsEdited = false;
    m_IsEditedIsSet = false;
    m_ErrorCode = utility::conversions::to_string_t("");
    m_ErrorCodeIsSet = false;
    m_FilesIsSet = false;
    m_PayloadIsSet = false;
    m_Avatar = utility::conversions::to_string_t("");
    m_AvatarIsSet = false;
}

Conversation::~Conversation()
{
}

void Conversation::validate()
{
    // TODO: implement validation
}

web::json::value Conversation::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("direction")] = ModelBase::toJson(m_Direction);
    val[utility::conversions::to_string_t("sender")] = ModelBase::toJson(m_Sender);
    val[utility::conversions::to_string_t("messageTime")] = ModelBase::toJson(m_MessageTime);
    val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);
    val[utility::conversions::to_string_t("receiver")] = ModelBase::toJson(m_Receiver);
    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    val[utility::conversions::to_string_t("sessionId")] = ModelBase::toJson(m_SessionId);
    if(m_InitiatorIdIsSet)
    {
        val[utility::conversions::to_string_t("initiatorId")] = ModelBase::toJson(m_InitiatorId);
    }
    if(m_MessageFileIdIsSet)
    {
        val[utility::conversions::to_string_t("messageFileId")] = ModelBase::toJson(m_MessageFileId);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ChatTypeIsSet)
    {
        val[utility::conversions::to_string_t("chatType")] = ModelBase::toJson(m_ChatType);
    }
    if(m_ChatIdIsSet)
    {
        val[utility::conversions::to_string_t("chatId")] = ModelBase::toJson(m_ChatId);
    }
    if(m_IsEditedIsSet)
    {
        val[utility::conversions::to_string_t("isEdited")] = ModelBase::toJson(m_IsEdited);
    }
    if(m_ErrorCodeIsSet)
    {
        val[utility::conversions::to_string_t("errorCode")] = ModelBase::toJson(m_ErrorCode);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Files )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("files")] = web::json::value::array(jsonArray);
        }
    }
    if(m_PayloadIsSet)
    {
        val[utility::conversions::to_string_t("payload")] = ModelBase::toJson(m_Payload);
    }
    if(m_AvatarIsSet)
    {
        val[utility::conversions::to_string_t("avatar")] = ModelBase::toJson(m_Avatar);
    }

    return val;
}

void Conversation::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("direction")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("direction")];
        if(!fieldValue.is_null())
        {
            setDirection(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sender")];
        if(!fieldValue.is_null())
        {
            setSender(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageTime")];
        if(!fieldValue.is_null())
        {
            setMessageTime(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("text")];
        if(!fieldValue.is_null())
        {
            setText(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("receiver")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("receiver")];
        if(!fieldValue.is_null())
        {
            setReceiver(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sessionId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sessionId")];
        if(!fieldValue.is_null())
        {
            setSessionId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initiatorId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("initiatorId")];
        if(!fieldValue.is_null())
        {
            setInitiatorId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageFileId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageFileId")];
        if(!fieldValue.is_null())
        {
            setMessageFileId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatType")];
        if(!fieldValue.is_null())
        {
            setChatType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatId")];
        if(!fieldValue.is_null())
        {
            setChatId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isEdited")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("isEdited")];
        if(!fieldValue.is_null())
        {
            setIsEdited(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("errorCode")];
        if(!fieldValue.is_null())
        {
            setErrorCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Files.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("files")))
        {
        for( auto& item : val[utility::conversions::to_string_t("files")].as_array() )
        {
            if(item.is_null())
            {
                m_Files.push_back( std::shared_ptr<File>(nullptr) );
            }
            else
            {
                std::shared_ptr<File> newItem(new File());
                newItem->fromJson(item);
                m_Files.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("payload")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("payload")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MessagePayload> newItem(new MessagePayload());
            newItem->fromJson(fieldValue);
            setPayload( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avatar")];
        if(!fieldValue.is_null())
        {
            setAvatar(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Conversation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("direction"), m_Direction));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender"), m_Sender));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageTime"), m_MessageTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("receiver"), m_Receiver));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sessionId"), m_SessionId));
    if(m_InitiatorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initiatorId"), m_InitiatorId));
    }
    if(m_MessageFileIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageFileId"), m_MessageFileId));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
        
    }
    if(m_ChatTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatType"), m_ChatType));
        
    }
    if(m_ChatIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatId"), m_ChatId));
    }
    if(m_IsEditedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEdited"), m_IsEdited));
    }
    if(m_ErrorCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorCode"), m_ErrorCode));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Files )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("files"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_PayloadIsSet)
    {
        if (m_Payload.get())
        {
            m_Payload->toMultipart(multipart, utility::conversions::to_string_t("payload."));
        }
        
    }
    if(m_AvatarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar"), m_Avatar));
        
    }
}

void Conversation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setDirection(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("direction"))));
    setSender(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender"))));
    setMessageTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageTime"))));
    setText(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("text"))));
    setReceiver(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("receiver"))));
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    setSessionId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sessionId"))));
    if(multipart->hasContent(utility::conversions::to_string_t("initiatorId")))
    {
        setInitiatorId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("initiatorId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("messageFileId")))
    {
        setMessageFileId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageFileId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("chatType")))
    {
        setChatType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("chatId")))
    {
        setChatId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEdited")))
    {
        setIsEdited(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEdited"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorCode")))
    {
        setErrorCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorCode"))));
    }
    {
        m_Files.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("files")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("files"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Files.push_back( std::shared_ptr<File>(nullptr) );
            }
            else
            {
                std::shared_ptr<File> newItem(new File());
                newItem->fromJson(item);
                m_Files.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("payload")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("payload")))
        {
            std::shared_ptr<MessagePayload> newItem(new MessagePayload());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("payload."));
            setPayload( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avatar")))
    {
        setAvatar(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar"))));
    }
}

int32_t Conversation::getId() const
{
    return m_Id;
}


void Conversation::setId(int32_t value)
{
    m_Id = value;
    
}
utility::string_t Conversation::getDirection() const
{
    return m_Direction;
}


void Conversation::setDirection(utility::string_t value)
{
    m_Direction = value;
    
}
utility::string_t Conversation::getSender() const
{
    return m_Sender;
}


void Conversation::setSender(utility::string_t value)
{
    m_Sender = value;
    
}
utility::datetime Conversation::getMessageTime() const
{
    return m_MessageTime;
}


void Conversation::setMessageTime(utility::datetime value)
{
    m_MessageTime = value;
    
}
utility::string_t Conversation::getText() const
{
    return m_Text;
}


void Conversation::setText(utility::string_t value)
{
    m_Text = value;
    
}
utility::string_t Conversation::getReceiver() const
{
    return m_Receiver;
}


void Conversation::setReceiver(utility::string_t value)
{
    m_Receiver = value;
    
}
utility::string_t Conversation::getStatus() const
{
    return m_Status;
}


void Conversation::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
utility::string_t Conversation::getFirstName() const
{
    return m_FirstName;
}


void Conversation::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    
}
utility::string_t Conversation::getLastName() const
{
    return m_LastName;
}


void Conversation::setLastName(utility::string_t value)
{
    m_LastName = value;
    
}
int32_t Conversation::getSessionId() const
{
    return m_SessionId;
}


void Conversation::setSessionId(int32_t value)
{
    m_SessionId = value;
    
}
int32_t Conversation::getInitiatorId() const
{
    return m_InitiatorId;
}


void Conversation::setInitiatorId(int32_t value)
{
    m_InitiatorId = value;
    m_InitiatorIdIsSet = true;
}
bool Conversation::initiatorIdIsSet() const
{
    return m_InitiatorIdIsSet;
}

void Conversation::unsetInitiatorId()
{
    m_InitiatorIdIsSet = false;
}

int32_t Conversation::getMessageFileId() const
{
    return m_MessageFileId;
}


void Conversation::setMessageFileId(int32_t value)
{
    m_MessageFileId = value;
    m_MessageFileIdIsSet = true;
}
bool Conversation::messageFileIdIsSet() const
{
    return m_MessageFileIdIsSet;
}

void Conversation::unsetMessageFileId()
{
    m_MessageFileIdIsSet = false;
}

utility::string_t Conversation::getType() const
{
    return m_Type;
}


void Conversation::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool Conversation::typeIsSet() const
{
    return m_TypeIsSet;
}

void Conversation::unsetType()
{
    m_TypeIsSet = false;
}

utility::string_t Conversation::getChatType() const
{
    return m_ChatType;
}


void Conversation::setChatType(utility::string_t value)
{
    m_ChatType = value;
    m_ChatTypeIsSet = true;
}
bool Conversation::chatTypeIsSet() const
{
    return m_ChatTypeIsSet;
}

void Conversation::unsetChatType()
{
    m_ChatTypeIsSet = false;
}

int32_t Conversation::getChatId() const
{
    return m_ChatId;
}


void Conversation::setChatId(int32_t value)
{
    m_ChatId = value;
    m_ChatIdIsSet = true;
}
bool Conversation::chatIdIsSet() const
{
    return m_ChatIdIsSet;
}

void Conversation::unsetChatId()
{
    m_ChatIdIsSet = false;
}

bool Conversation::isIsEdited() const
{
    return m_IsEdited;
}


void Conversation::setIsEdited(bool value)
{
    m_IsEdited = value;
    m_IsEditedIsSet = true;
}
bool Conversation::isEditedIsSet() const
{
    return m_IsEditedIsSet;
}

void Conversation::unsetIsEdited()
{
    m_IsEditedIsSet = false;
}

utility::string_t Conversation::getErrorCode() const
{
    return m_ErrorCode;
}


void Conversation::setErrorCode(utility::string_t value)
{
    m_ErrorCode = value;
    m_ErrorCodeIsSet = true;
}
bool Conversation::errorCodeIsSet() const
{
    return m_ErrorCodeIsSet;
}

void Conversation::unsetErrorCode()
{
    m_ErrorCodeIsSet = false;
}

std::vector<std::shared_ptr<File>>& Conversation::getFiles()
{
    return m_Files;
}

void Conversation::setFiles(std::vector<std::shared_ptr<File>> value)
{
    m_Files = value;
    m_FilesIsSet = true;
}
bool Conversation::filesIsSet() const
{
    return m_FilesIsSet;
}

void Conversation::unsetFiles()
{
    m_FilesIsSet = false;
}

std::shared_ptr<MessagePayload> Conversation::getPayload() const
{
    return m_Payload;
}


void Conversation::setPayload(std::shared_ptr<MessagePayload> value)
{
    m_Payload = value;
    m_PayloadIsSet = true;
}
bool Conversation::payloadIsSet() const
{
    return m_PayloadIsSet;
}

void Conversation::unsetPayload()
{
    m_PayloadIsSet = false;
}

utility::string_t Conversation::getAvatar() const
{
    return m_Avatar;
}


void Conversation::setAvatar(utility::string_t value)
{
    m_Avatar = value;
    m_AvatarIsSet = true;
}
bool Conversation::avatarIsSet() const
{
    return m_AvatarIsSet;
}

void Conversation::unsetAvatar()
{
    m_AvatarIsSet = false;
}

}
}
}
}

