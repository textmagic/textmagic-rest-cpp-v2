/**
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "File.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

File::File()
{
    m_Id = 0;
    m_Name = utility::conversions::to_string_t("");
    m_OriginalName = utility::conversions::to_string_t("");
    m_MimeType = utility::conversions::to_string_t("");
    m_Size = 0;
    m_Type = utility::conversions::to_string_t("");
    m_CreatedAt = utility::datetime();
    m_PreviewUrl = utility::conversions::to_string_t("");
    m_PreviewUrlIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_MetadataIsSet = false;
}

File::~File()
{
}

void File::validate()
{
    // TODO: implement validation
}

web::json::value File::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("originalName")] = ModelBase::toJson(m_OriginalName);
    val[utility::conversions::to_string_t("mimeType")] = ModelBase::toJson(m_MimeType);
    val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    if(m_PreviewUrlIsSet)
    {
        val[utility::conversions::to_string_t("previewUrl")] = ModelBase::toJson(m_PreviewUrl);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t("metadata")] = ModelBase::toJson(m_Metadata);
    }

    return val;
}

void File::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("originalName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("originalName")];
        if(!fieldValue.is_null())
        {
            setOriginalName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mimeType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("mimeType")];
        if(!fieldValue.is_null())
        {
            setMimeType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("size")];
        if(!fieldValue.is_null())
        {
            setSize(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("createdAt")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("previewUrl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("previewUrl")];
        if(!fieldValue.is_null())
        {
            setPreviewUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("url")];
        if(!fieldValue.is_null())
        {
            setUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metadata")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("metadata")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FileMetadata> newItem(new FileMetadata());
            newItem->fromJson(fieldValue);
            setMetadata( newItem );
        }
    }
}

void File::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("originalName"), m_OriginalName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mimeType"), m_MimeType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    if(m_PreviewUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("previewUrl"), m_PreviewUrl));
        
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
        
    }
    if(m_MetadataIsSet)
    {
        if (m_Metadata.get())
        {
            m_Metadata->toMultipart(multipart, utility::conversions::to_string_t("metadata."));
        }
        
    }
}

void File::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setOriginalName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("originalName"))));
    setMimeType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mimeType"))));
    setSize(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("size"))));
    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    setCreatedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt"))));
    if(multipart->hasContent(utility::conversions::to_string_t("previewUrl")))
    {
        setPreviewUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("previewUrl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("url"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metadata")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("metadata")))
        {
            std::shared_ptr<FileMetadata> newItem(new FileMetadata());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("metadata."));
            setMetadata( newItem );
        }
    }
}

int32_t File::getId() const
{
    return m_Id;
}


void File::setId(int32_t value)
{
    m_Id = value;
    
}
utility::string_t File::getName() const
{
    return m_Name;
}


void File::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t File::getOriginalName() const
{
    return m_OriginalName;
}


void File::setOriginalName(utility::string_t value)
{
    m_OriginalName = value;
    
}
utility::string_t File::getMimeType() const
{
    return m_MimeType;
}


void File::setMimeType(utility::string_t value)
{
    m_MimeType = value;
    
}
int32_t File::getSize() const
{
    return m_Size;
}


void File::setSize(int32_t value)
{
    m_Size = value;
    
}
utility::string_t File::getType() const
{
    return m_Type;
}


void File::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::datetime File::getCreatedAt() const
{
    return m_CreatedAt;
}


void File::setCreatedAt(utility::datetime value)
{
    m_CreatedAt = value;
    
}
utility::string_t File::getPreviewUrl() const
{
    return m_PreviewUrl;
}


void File::setPreviewUrl(utility::string_t value)
{
    m_PreviewUrl = value;
    m_PreviewUrlIsSet = true;
}
bool File::previewUrlIsSet() const
{
    return m_PreviewUrlIsSet;
}

void File::unsetPreviewUrl()
{
    m_PreviewUrlIsSet = false;
}

utility::string_t File::getUrl() const
{
    return m_Url;
}


void File::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool File::urlIsSet() const
{
    return m_UrlIsSet;
}

void File::unsetUrl()
{
    m_UrlIsSet = false;
}

std::shared_ptr<FileMetadata> File::getMetadata() const
{
    return m_Metadata;
}


void File::setMetadata(std::shared_ptr<FileMetadata> value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}
bool File::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void File::unsetMetadata()
{
    m_MetadataIsSet = false;
}

}
}
}
}

