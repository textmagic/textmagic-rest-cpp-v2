/**
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MessageOut_senderSource.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

MessageOut_senderSource::MessageOut_senderSource()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_CountryId = utility::conversions::to_string_t("");
    m_CountryIdIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_CarrierStatus = utility::conversions::to_string_t("");
    m_CarrierStatusIsSet = false;
}

MessageOut_senderSource::~MessageOut_senderSource()
{
}

void MessageOut_senderSource::validate()
{
    // TODO: implement validation
}

web::json::value MessageOut_senderSource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_CountryIdIsSet)
    {
        val[utility::conversions::to_string_t("countryId")] = ModelBase::toJson(m_CountryId);
    }
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_CarrierStatusIsSet)
    {
        val[utility::conversions::to_string_t("carrierStatus")] = ModelBase::toJson(m_CarrierStatus);
    }

    return val;
}

void MessageOut_senderSource::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phone")];
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("countryId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("countryId")];
        if(!fieldValue.is_null())
        {
            setCountryId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("label")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("label")];
        if(!fieldValue.is_null())
        {
            setLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("carrierStatus")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("carrierStatus")];
        if(!fieldValue.is_null())
        {
            setCarrierStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void MessageOut_senderSource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
        
    }
    if(m_CountryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("countryId"), m_CountryId));
        
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
        
    }
    if(m_CarrierStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("carrierStatus"), m_CarrierStatus));
        
    }
}

void MessageOut_senderSource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("countryId")))
    {
        setCountryId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("countryId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("label")))
    {
        setLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("label"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("carrierStatus")))
    {
        setCarrierStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("carrierStatus"))));
    }
}

int32_t MessageOut_senderSource::getId() const
{
    return m_Id;
}


void MessageOut_senderSource::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool MessageOut_senderSource::idIsSet() const
{
    return m_IdIsSet;
}

void MessageOut_senderSource::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t MessageOut_senderSource::getPhone() const
{
    return m_Phone;
}


void MessageOut_senderSource::setPhone(utility::string_t value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool MessageOut_senderSource::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void MessageOut_senderSource::unsetPhone()
{
    m_PhoneIsSet = false;
}

utility::string_t MessageOut_senderSource::getType() const
{
    return m_Type;
}


void MessageOut_senderSource::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool MessageOut_senderSource::typeIsSet() const
{
    return m_TypeIsSet;
}

void MessageOut_senderSource::unsetType()
{
    m_TypeIsSet = false;
}

utility::string_t MessageOut_senderSource::getCountryId() const
{
    return m_CountryId;
}


void MessageOut_senderSource::setCountryId(utility::string_t value)
{
    m_CountryId = value;
    m_CountryIdIsSet = true;
}
bool MessageOut_senderSource::countryIdIsSet() const
{
    return m_CountryIdIsSet;
}

void MessageOut_senderSource::unsetCountryId()
{
    m_CountryIdIsSet = false;
}

utility::string_t MessageOut_senderSource::getLabel() const
{
    return m_Label;
}


void MessageOut_senderSource::setLabel(utility::string_t value)
{
    m_Label = value;
    m_LabelIsSet = true;
}
bool MessageOut_senderSource::labelIsSet() const
{
    return m_LabelIsSet;
}

void MessageOut_senderSource::unsetLabel()
{
    m_LabelIsSet = false;
}

utility::string_t MessageOut_senderSource::getStatus() const
{
    return m_Status;
}


void MessageOut_senderSource::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool MessageOut_senderSource::statusIsSet() const
{
    return m_StatusIsSet;
}

void MessageOut_senderSource::unsetStatus()
{
    m_StatusIsSet = false;
}

utility::string_t MessageOut_senderSource::getCarrierStatus() const
{
    return m_CarrierStatus;
}


void MessageOut_senderSource::setCarrierStatus(utility::string_t value)
{
    m_CarrierStatus = value;
    m_CarrierStatusIsSet = true;
}
bool MessageOut_senderSource::carrierStatusIsSet() const
{
    return m_CarrierStatusIsSet;
}

void MessageOut_senderSource::unsetCarrierStatus()
{
    m_CarrierStatusIsSet = false;
}

}
}
}
}

