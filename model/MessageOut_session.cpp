/**
 * Textmagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MessageOut_session.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

MessageOut_session::MessageOut_session()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_StartTime = utility::conversions::to_string_t("");
    m_StartTimeIsSet = false;
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
    m_Price = 0.0f;
    m_PriceIsSet = false;
    m_NumbersCount = 0;
    m_NumbersCountIsSet = false;
    m_Destination = utility::conversions::to_string_t("");
    m_DestinationIsSet = false;
    m_Source = utility::conversions::to_string_t("");
    m_SourceIsSet = false;
    m_ReferenceId = utility::conversions::to_string_t("");
    m_ReferenceIdIsSet = false;
    m_InitiatorId = 0;
    m_InitiatorIdIsSet = false;
}

MessageOut_session::~MessageOut_session()
{
}

void MessageOut_session::validate()
{
    // TODO: implement validation
}

web::json::value MessageOut_session::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_StartTimeIsSet)
    {
        val[utility::conversions::to_string_t("startTime")] = ModelBase::toJson(m_StartTime);
    }
    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);
    }
    if(m_NumbersCountIsSet)
    {
        val[utility::conversions::to_string_t("numbersCount")] = ModelBase::toJson(m_NumbersCount);
    }
    if(m_DestinationIsSet)
    {
        val[utility::conversions::to_string_t("destination")] = ModelBase::toJson(m_Destination);
    }
    if(m_SourceIsSet)
    {
        val[utility::conversions::to_string_t("source")] = ModelBase::toJson(m_Source);
    }
    if(m_ReferenceIdIsSet)
    {
        val[utility::conversions::to_string_t("referenceId")] = ModelBase::toJson(m_ReferenceId);
    }
    if(m_InitiatorIdIsSet)
    {
        val[utility::conversions::to_string_t("initiatorId")] = ModelBase::toJson(m_InitiatorId);
    }

    return val;
}

void MessageOut_session::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("startTime")];
        if(!fieldValue.is_null())
        {
            setStartTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("text")];
        if(!fieldValue.is_null())
        {
            setText(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price")];
        if(!fieldValue.is_null())
        {
            setPrice(ModelBase::floatFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("numbersCount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("numbersCount")];
        if(!fieldValue.is_null())
        {
            setNumbersCount(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("destination")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("destination")];
        if(!fieldValue.is_null())
        {
            setDestination(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("source")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("source")];
        if(!fieldValue.is_null())
        {
            setSource(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referenceId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("referenceId")];
        if(!fieldValue.is_null())
        {
            setReferenceId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initiatorId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("initiatorId")];
        if(!fieldValue.is_null())
        {
            setInitiatorId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void MessageOut_session::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_StartTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startTime"), m_StartTime));
        
    }
    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
        
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
    }
    if(m_NumbersCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numbersCount"), m_NumbersCount));
    }
    if(m_DestinationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("destination"), m_Destination));
        
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("source"), m_Source));
        
    }
    if(m_ReferenceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referenceId"), m_ReferenceId));
        
    }
    if(m_InitiatorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initiatorId"), m_InitiatorId));
    }
}

void MessageOut_session::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startTime")))
    {
        setStartTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("startTime"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("text")))
    {
        setText(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("text"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::floatFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numbersCount")))
    {
        setNumbersCount(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("numbersCount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("destination")))
    {
        setDestination(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("destination"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("source")))
    {
        setSource(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("source"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referenceId")))
    {
        setReferenceId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("referenceId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initiatorId")))
    {
        setInitiatorId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("initiatorId"))));
    }
}

int32_t MessageOut_session::getId() const
{
    return m_Id;
}


void MessageOut_session::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool MessageOut_session::idIsSet() const
{
    return m_IdIsSet;
}

void MessageOut_session::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t MessageOut_session::getStartTime() const
{
    return m_StartTime;
}


void MessageOut_session::setStartTime(utility::string_t value)
{
    m_StartTime = value;
    m_StartTimeIsSet = true;
}
bool MessageOut_session::startTimeIsSet() const
{
    return m_StartTimeIsSet;
}

void MessageOut_session::unsetStartTime()
{
    m_StartTimeIsSet = false;
}

utility::string_t MessageOut_session::getText() const
{
    return m_Text;
}


void MessageOut_session::setText(utility::string_t value)
{
    m_Text = value;
    m_TextIsSet = true;
}
bool MessageOut_session::textIsSet() const
{
    return m_TextIsSet;
}

void MessageOut_session::unsetText()
{
    m_TextIsSet = false;
}

float MessageOut_session::getPrice() const
{
    return m_Price;
}


void MessageOut_session::setPrice(float value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool MessageOut_session::priceIsSet() const
{
    return m_PriceIsSet;
}

void MessageOut_session::unsetPrice()
{
    m_PriceIsSet = false;
}

int32_t MessageOut_session::getNumbersCount() const
{
    return m_NumbersCount;
}


void MessageOut_session::setNumbersCount(int32_t value)
{
    m_NumbersCount = value;
    m_NumbersCountIsSet = true;
}
bool MessageOut_session::numbersCountIsSet() const
{
    return m_NumbersCountIsSet;
}

void MessageOut_session::unsetNumbersCount()
{
    m_NumbersCountIsSet = false;
}

utility::string_t MessageOut_session::getDestination() const
{
    return m_Destination;
}


void MessageOut_session::setDestination(utility::string_t value)
{
    m_Destination = value;
    m_DestinationIsSet = true;
}
bool MessageOut_session::destinationIsSet() const
{
    return m_DestinationIsSet;
}

void MessageOut_session::unsetDestination()
{
    m_DestinationIsSet = false;
}

utility::string_t MessageOut_session::getSource() const
{
    return m_Source;
}


void MessageOut_session::setSource(utility::string_t value)
{
    m_Source = value;
    m_SourceIsSet = true;
}
bool MessageOut_session::sourceIsSet() const
{
    return m_SourceIsSet;
}

void MessageOut_session::unsetSource()
{
    m_SourceIsSet = false;
}

utility::string_t MessageOut_session::getReferenceId() const
{
    return m_ReferenceId;
}


void MessageOut_session::setReferenceId(utility::string_t value)
{
    m_ReferenceId = value;
    m_ReferenceIdIsSet = true;
}
bool MessageOut_session::referenceIdIsSet() const
{
    return m_ReferenceIdIsSet;
}

void MessageOut_session::unsetReferenceId()
{
    m_ReferenceIdIsSet = false;
}

int32_t MessageOut_session::getInitiatorId() const
{
    return m_InitiatorId;
}


void MessageOut_session::setInitiatorId(int32_t value)
{
    m_InitiatorId = value;
    m_InitiatorIdIsSet = true;
}
bool MessageOut_session::initiatorIdIsSet() const
{
    return m_InitiatorIdIsSet;
}

void MessageOut_session::unsetInitiatorId()
{
    m_InitiatorIdIsSet = false;
}

}
}
}
}

