/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TextMagicApi.h
 *
 * 
 */

#ifndef COM_TEXTMAGIC_CLIENT_API_TextMagicApi_H_
#define COM_TEXTMAGIC_CLIENT_API_TextMagicApi_H_


#include "../ApiClient.h"

#include "AssignContactsToListInputObject.h"
#include "BadRequestResponse.h"
#include "BlockContactInputObject.h"
#include "BulkSession.h"
#include "BuyDedicatedNumberInputObject.h"
#include "Chat.h"
#include "CheckPhoneVerificationCodeInputObject.h"
#include "ClearAndAssignContactsToListInputObject.h"
#include "CloseChatsBulkInputObject.h"
#include "Contact.h"
#include "ContactNote.h"
#include "CreateContactInputObject.h"
#include "CreateContactNoteInputObject.h"
#include "CreateCustomFieldInputObject.h"
#include "CreateListInputObject.h"
#include "CreateTemplateInputObject.h"
#include "DeleteChatMessagesBulkInputObject.h"
#include "DeleteChatsBulkInputObject.h"
#include "DeleteContacsFromListObject.h"
#include "DeleteContactNotesBulkInputObject.h"
#include "DeleteContactsByIdsInputObject.h"
#include "DeleteInboundMessagesBulkInputObject.h"
#include "DeleteListContactsBulkInputObject.h"
#include "DeleteListsBulkInputObject.h"
#include "DeleteMessageSessionsBulkInputObject.h"
#include "DeleteOutboundMessagesBulkInputObject.h"
#include "DeleteScheduledMessagesBulkInputObject.h"
#include "DeleteTemplatesBulkInputObject.h"
#include "DoCarrierLookupResponse.h"
#include "DoEmailLookupResponse.h"
#include "GetAllBulkSessionsPaginatedResponse.h"
#include "GetAllChatsPaginatedResponse.h"
#include "GetAllInboundMessagesPaginatedResponse.h"
#include "GetAllMessageSessionsPaginatedResponse.h"
#include "GetAllOutboundMessagesPaginatedResponse.h"
#include "GetAllScheduledMessagesPaginatedResponse.h"
#include "GetAllTemplatesPaginatedResponse.h"
#include "GetAvailableDedicatedNumbersResponse.h"
#include "GetAvailableSenderSettingOptionsResponse.h"
#include "GetBalanceNotificationOptionsResponse.h"
#include "GetBalanceNotificationSettingsResponse.h"
#include "GetBlockedContactsPaginatedResponse.h"
#include "GetCallbackSettingsResponse.h"
#include "GetChatMessagesPaginatedResponse.h"
#include "GetContactImportSessionProgressResponse.h"
#include "GetContactNotesPaginatedResponse.h"
#include "GetContactsAutocompleteResponse.h"
#include "GetContactsByListIdPaginatedResponse.h"
#include "GetContactsPaginatedResponse.h"
#include "GetCountriesResponse.h"
#include "GetCustomFieldsPaginatedResponse.h"
#include "GetFavouritesPaginatedResponse.h"
#include "GetInboundMessagesNotificationSettingsResponse.h"
#include "GetInvoicesPaginatedResponse.h"
#include "GetListContactsIdsResponse.h"
#include "GetListsOfContactPaginatedResponse.h"
#include "GetListsPaginatedResponse.h"
#include "GetMessagePreviewResponse.h"
#include "GetMessagePriceResponse.h"
#include "GetMessageSessionStatResponse.h"
#include "GetMessagesBySessionIdPaginatedResponse.h"
#include "GetMessagingCountersResponse.h"
#include "GetMessagingStatResponse.h"
#include "GetOutboundMessagesHistoryPaginatedResponse.h"
#include "GetSenderIdsPaginatedResponse.h"
#include "GetSenderSettingsResponse.h"
#include "GetSpendingStatPaginatedResponse.h"
#include "GetSubaccountsWithTokensInputObject.h"
#include "GetSubaccountsWithTokensResponse.h"
#include "GetTimezonesResponse.h"
#include "GetUnreadMessagesTotalResponse.h"
#include "GetUnsubscribersPaginatedResponse.h"
#include "GetUserDedicatedNumbersPaginatedResponse.h"
#include "HttpContent.h"
#include "InviteSubaccountInputObject.h"
#include "List.h"
#include "MarkChatsReadBulkInputObject.h"
#include "MarkChatsUnreadBulkInputObject.h"
#include "MessageIn.h"
#include "MessageOut.h"
#include "MessageSession.h"
#include "MessageTemplate.h"
#include "MessagesIcs.h"
#include "MuteChatInputObject.h"
#include "MuteChatsBulkInputObject.h"
#include "NotFoundResponse.h"
#include "PingResponse.h"
#include "ReopenChatsBulkInputObject.h"
#include "RequestNewSubaccountTokenInputObject.h"
#include "RequestSenderIdInputObject.h"
#include "ResourceLinkResponse.h"
#include "SearchChatsByIdsPaginatedResponse.h"
#include "SearchChatsByReceipentPaginatedResponse.h"
#include "SearchChatsPaginatedResponse.h"
#include "SearchContactsPaginatedResponse.h"
#include "SearchInboundMessagesPaginatedResponse.h"
#include "SearchListsPaginatedResponse.h"
#include "SearchOutboundMessagesPaginatedResponse.h"
#include "SearchScheduledMessagesPaginatedResponse.h"
#include "SearchTemplatesPaginatedResponse.h"
#include "SendMessageInputObject.h"
#include "SendMessageResponse.h"
#include "SendPhoneVerificationCodeInputObject.h"
#include "SendPhoneVerificationCodeResponse.h"
#include "SenderId.h"
#include "SetChatStatusInputObject.h"
#include "UnauthorizedResponse.h"
#include "UnblockContactInputObject.h"
#include "UnblockContactsBulkInputObject.h"
#include "UnmuteChatsBulkInputObject.h"
#include "UnsubscribeContactInputObject.h"
#include "UnsubscribedContact.h"
#include "UpdateBalanceNotificationSettingsInputObject.h"
#include "UpdateCallbackSettingsInputObject.h"
#include "UpdateChatDesktopNotificationSettingsInputObject.h"
#include "UpdateContactInputObject.h"
#include "UpdateContactNoteInputObject.h"
#include "UpdateCurrentUserInputObject.h"
#include "UpdateCurrentUserResponse.h"
#include "UpdateCustomFieldInputObject.h"
#include "UpdateCustomFieldValueInputObject.h"
#include "UpdateInboundMessagesNotificationSettingsInputObject.h"
#include "UpdateListObject.h"
#include "UpdateSenderSettingInputObject.h"
#include "UpdateTemplateInputObject.h"
#include "UploadMessageAttachmentResponse.h"
#include "User.h"
#include "UserCustomField.h"
#include "UsersInbound.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace com {
namespace textmagic {
namespace client {
namespace api {

using namespace com::textmagic::client::model;

class  TextMagicApi
{
public:
    TextMagicApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~TextMagicApi();
    /// <summary>
    /// Assign contacts to a list
    /// </summary>
    /// <remarks>
    /// &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
    /// </remarks>
    /// <param name="assignContactsToListInputObject"></param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> assignContactsToList(
        std::shared_ptr<AssignContactsToListInputObject> assignContactsToListInputObject,
        int32_t id
    );
    /// <summary>
    /// Block contact by phone number
    /// </summary>
    /// <remarks>
    /// Block contact from inbound and outbound communication by phone number.
    /// </remarks>
    /// <param name="blockContactInputObject"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> blockContact(
        std::shared_ptr<BlockContactInputObject> blockContactInputObject
    );
    /// <summary>
    /// Buy a dedicated number
    /// </summary>
    /// <remarks>
    /// To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
    /// </remarks>
    /// <param name="buyDedicatedNumberInputObject"></param>
    pplx::task<void> buyDedicatedNumber(
        std::shared_ptr<BuyDedicatedNumberInputObject> buyDedicatedNumberInputObject
    );
    /// <summary>
    /// Cancel verification process
    /// </summary>
    /// <remarks>
    /// You can cancel the verification not earlier than 30 seconds after the initial request.
    /// </remarks>
    /// <param name="verifyId">the verifyId that you received in Step 1.</param>
    pplx::task<void> cancelVerification(
        utility::string_t verifyId
    );
    /// <summary>
    /// Step 2: Check the verification code 
    /// </summary>
    /// <remarks>
    /// Check received code from user with the code which was actually sent.
    /// </remarks>
    /// <param name="checkPhoneVerificationCodeInputObject"></param>
    pplx::task<void> checkPhoneVerificationCodeTFA(
        std::shared_ptr<CheckPhoneVerificationCodeInputObject> checkPhoneVerificationCodeInputObject
    );
    /// <summary>
    /// Reset list members to the specified contacts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="clearAndAssignContactsToListInputObject"></param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> clearAndAssignContactsToList(
        std::shared_ptr<ClearAndAssignContactsToListInputObject> clearAndAssignContactsToListInputObject,
        int32_t id
    );
    /// <summary>
    /// Close chats (bulk)
    /// </summary>
    /// <remarks>
    /// Close chats by chat ids or close all chats
    /// </remarks>
    /// <param name="closeChatsBulkInputObject"></param>
    pplx::task<void> closeChatsBulk(
        std::shared_ptr<CloseChatsBulkInputObject> closeChatsBulkInputObject
    );
    /// <summary>
    /// Close read chats
    /// </summary>
    /// <remarks>
    /// Close all chats that have no unread messages.
    /// </remarks>
    pplx::task<void> closeReadChats(
    );
    /// <summary>
    /// Close sub-account
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> closeSubaccount(
        int32_t id
    );
    /// <summary>
    /// Add a new contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createContactInputObject"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createContact(
        std::shared_ptr<CreateContactInputObject> createContactInputObject
    );
    /// <summary>
    /// Create a new contact note
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createContactNoteInputObject"></param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createContactNote(
        std::shared_ptr<CreateContactNoteInputObject> createContactNoteInputObject,
        int32_t id
    );
    /// <summary>
    /// Add a new custom field
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createCustomFieldInputObject"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createCustomField(
        std::shared_ptr<CreateCustomFieldInputObject> createCustomFieldInputObject
    );
    /// <summary>
    /// Create a new list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createListInputObject"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createList(
        std::shared_ptr<CreateListInputObject> createListInputObject
    );
    /// <summary>
    /// Create a template
    /// </summary>
    /// <remarks>
    /// There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
    /// </remarks>
    /// <param name="createTemplateInputObject"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> createTemplate(
        std::shared_ptr<CreateTemplateInputObject> createTemplateInputObject
    );
    /// <summary>
    /// Delete contacts (bulk)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> deleteAllContacts(
    );
    /// <summary>
    /// Delete all messages
    /// </summary>
    /// <remarks>
    /// Delete all messages.
    /// </remarks>
    pplx::task<void> deleteAllOutboundMessages(
    );
    /// <summary>
    /// Delete an avatar
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> deleteAvatar(
    );
    /// <summary>
    /// Delete chat messages by ID(s)
    /// </summary>
    /// <remarks>
    /// Delete messages from chat by given messages ID(s).
    /// </remarks>
    /// <param name="deleteChatMessagesBulkInputObject"></param>
    /// <param name="id"></param>
    pplx::task<void> deleteChatMessages(
        std::shared_ptr<DeleteChatMessagesBulkInputObject> deleteChatMessagesBulkInputObject,
        int32_t id
    );
    /// <summary>
    /// Delete chats (bulk)
    /// </summary>
    /// <remarks>
    /// Delete chats by given ID(s) or delete all chats.
    /// </remarks>
    /// <param name="deleteChatsBulkInputObject"></param>
    pplx::task<void> deleteChatsBulk(
        std::shared_ptr<DeleteChatsBulkInputObject> deleteChatsBulkInputObject
    );
    /// <summary>
    /// Delete a contact
    /// </summary>
    /// <remarks>
    /// &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, instead use the Contact assignment command in the Lists section rather than deleting the contact. 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteContact(
        int32_t id
    );
    /// <summary>
    /// Delete an avatar
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteContactAvatar(
        int32_t id
    );
    /// <summary>
    /// Delete a contact note
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteContactNote(
        int32_t id
    );
    /// <summary>
    /// Delete contact notes (bulk)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="deleteContactNotesBulkInputObject"></param>
    pplx::task<void> deleteContactNotesBulk(
        int32_t id,
        std::shared_ptr<DeleteContactNotesBulkInputObject> deleteContactNotesBulkInputObject
    );
    /// <summary>
    /// Delete contacts by IDs (bulk)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteContactsByIdsInputObject"></param>
    pplx::task<void> deleteContactsByIds(
        std::shared_ptr<DeleteContactsByIdsInputObject> deleteContactsByIdsInputObject
    );
    /// <summary>
    /// Unassign contacts from a list
    /// </summary>
    /// <remarks>
    /// &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
    /// </remarks>
    /// <param name="deleteContacsFromListObject"></param>
    /// <param name="id"></param>
    pplx::task<void> deleteContactsFromList(
        std::shared_ptr<DeleteContacsFromListObject> deleteContacsFromListObject,
        int32_t id
    );
    /// <summary>
    /// Delete a custom field
    /// </summary>
    /// <remarks>
    /// &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteCustomField(
        int32_t id
    );
    /// <summary>
    /// Cancel dedicated number subscription
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteDedicatedNumber(
        int32_t id
    );
    /// <summary>
    /// Delete a single inbound message
    /// </summary>
    /// <remarks>
    /// &gt; Note, deleted inbound message will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
    /// </remarks>
    /// <param name="id">The unique numeric ID for the inbound message.</param>
    pplx::task<void> deleteInboundMessage(
        int32_t id
    );
    /// <summary>
    /// Delete inbound messages (bulk)
    /// </summary>
    /// <remarks>
    /// &gt; Note, deleted inbound message will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
    /// </remarks>
    /// <param name="deleteInboundMessagesBulkInputObject"></param>
    pplx::task<void> deleteInboundMessagesBulk(
        std::shared_ptr<DeleteInboundMessagesBulkInputObject> deleteInboundMessagesBulkInputObject
    );
    /// <summary>
    /// Delete a list
    /// </summary>
    /// <remarks>
    /// This command has no parameters. If successful, this command will return the standard delete response (204 No Content), otherwise a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well unless they were saved in other list.
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteList(
        int32_t id
    );
    /// <summary>
    /// Delete an avatar for the list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteListAvatar(
        int32_t id
    );
    /// <summary>
    /// Delete contacts from list (bulk)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteListContactsBulkInputObject"></param>
    /// <param name="id"></param>
    pplx::task<void> deleteListContactsBulk(
        std::shared_ptr<DeleteListContactsBulkInputObject> deleteListContactsBulkInputObject,
        int32_t id
    );
    /// <summary>
    /// Delete lists (bulk)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteListsBulkInputObject"></param>
    pplx::task<void> deleteListsBulk(
        std::shared_ptr<DeleteListsBulkInputObject> deleteListsBulkInputObject
    );
    /// <summary>
    /// Delete a session
    /// </summary>
    /// <remarks>
    /// Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteMessageSession(
        int32_t id
    );
    /// <summary>
    /// Delete sessions (bulk)
    /// </summary>
    /// <remarks>
    /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
    /// </remarks>
    /// <param name="deleteMessageSessionsBulkInputObject"></param>
    pplx::task<void> deleteMessageSessionsBulk(
        std::shared_ptr<DeleteMessageSessionsBulkInputObject> deleteMessageSessionsBulkInputObject
    );
    /// <summary>
    /// Delete message
    /// </summary>
    /// <remarks>
    /// Delete a single message.
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteOutboundMessage(
        int32_t id
    );
    /// <summary>
    /// Delete messages (bulk)
    /// </summary>
    /// <remarks>
    /// Delete outbound messages by given ID(s) or delete all outbound messages.
    /// </remarks>
    /// <param name="deleteOutboundMessagesBulkInputObject"></param>
    pplx::task<void> deleteOutboundMessagesBulk(
        std::shared_ptr<DeleteOutboundMessagesBulkInputObject> deleteOutboundMessagesBulkInputObject
    );
    /// <summary>
    /// Delete a single scheduled message
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteScheduledMessage(
        int32_t id
    );
    /// <summary>
    /// Delete scheduled messages (bulk)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="deleteScheduledMessagesBulkInputObject"></param>
    pplx::task<void> deleteScheduledMessagesBulk(
        std::shared_ptr<DeleteScheduledMessagesBulkInputObject> deleteScheduledMessagesBulkInputObject
    );
    /// <summary>
    /// Delete a Sender ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteSenderId(
        int32_t id
    );
    /// <summary>
    /// Delete a template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteTemplate(
        int32_t id
    );
    /// <summary>
    /// Delete templates (bulk)
    /// </summary>
    /// <remarks>
    /// Delete template by given ID(s) or delete all templates.
    /// </remarks>
    /// <param name="deleteTemplatesBulkInputObject"></param>
    pplx::task<void> deleteTemplatesBulk(
        std::shared_ptr<DeleteTemplatesBulkInputObject> deleteTemplatesBulkInputObject
    );
    /// <summary>
    /// Carrier Lookup
    /// </summary>
    /// <remarks>
    /// This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers can be checked one by one. You cannot check multiple numbers in one request.   
    /// </remarks>
    /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </param>
    /// <param name="country">This option must be specified only if the phone number in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)</param>
    pplx::task<std::shared_ptr<DoCarrierLookupResponse>> doCarrierLookup(
        utility::string_t phone,
        boost::optional<utility::string_t> country
    );
    /// <summary>
    /// Email Lookup
    /// </summary>
    /// <remarks>
    /// To get more details about an email address or to check if it is a valid email, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
    /// </remarks>
    /// <param name="email">Email address.</param>
    pplx::task<std::shared_ptr<DoEmailLookupResponse>> doEmailLookup(
        utility::string_t email
    );
    /// <summary>
    /// Get all bulk sessions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetAllBulkSessionsPaginatedResponse>> getAllBulkSessions(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get all chats
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
    /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetAllChatsPaginatedResponse>> getAllChats(
        boost::optional<utility::string_t> status,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> orderBy,
        boost::optional<int32_t> voice,
        boost::optional<int32_t> flat
    );
    /// <summary>
    /// Get all inbound messages
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetAllInboundMessagesPaginatedResponse>> getAllInboundMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get all sessions
    /// </summary>
    /// <remarks>
    /// Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetAllMessageSessionsPaginatedResponse>> getAllMessageSessions(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get all messages
    /// </summary>
    /// <remarks>
    /// Get all user oubound messages.
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
    pplx::task<std::shared_ptr<GetAllOutboundMessagesPaginatedResponse>> getAllOutboundMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> lastId
    );
    /// <summary>
    /// Get all scheduled messages
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetAllScheduledMessagesPaginatedResponse>> getAllScheduledMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> status,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get all templates
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional)</param>
    /// <param name="limit">The number of results per page. (optional)</param>
    pplx::task<std::shared_ptr<GetAllTemplatesPaginatedResponse>> getAllTemplates(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Find dedicated numbers available for purchase
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="country">Two-letter dedicated number country ISO code.</param>
    /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)</param>
    /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetAvailableDedicatedNumbersResponse>> getAvailableDedicatedNumbers(
        utility::string_t country,
        boost::optional<int32_t> prefix,
        boost::optional<int32_t> tollfree
    );
    /// <summary>
    /// Get available sender settings
    /// </summary>
    /// <remarks>
    /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
    /// </remarks>
    /// <param name="country">Two-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)</param>
    pplx::task<std::shared_ptr<GetAvailableSenderSettingOptionsResponse>> getAvailableSenderSettingOptions(
        boost::optional<utility::string_t> country
    );
    /// <summary>
    /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetBalanceNotificationOptionsResponse>> getBalanceNotificationOptions(
    );
    /// <summary>
    /// Get balance notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetBalanceNotificationSettingsResponse>> getBalanceNotificationSettings(
    );
    /// <summary>
    /// Get blocked contacts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="query">Find blocked contacts by specified search query (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetBlockedContactsPaginatedResponse>> getBlockedContacts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get bulk session status
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<BulkSession>> getBulkSession(
        int32_t id
    );
    /// <summary>
    /// Fetch callback URL settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetCallbackSettingsResponse>> getCallbackSettings(
    );
    /// <summary>
    /// Get a single chat
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<Chat>> getChat(
        int32_t id
    );
    /// <summary>
    /// Find chats by phone
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="phone"></param>
    /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
    /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Chat>> getChatByPhone(
        utility::string_t phone,
        boost::optional<int32_t> upsert,
        boost::optional<int32_t> reopen
    );
    /// <summary>
    /// Get chat messages
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="query">Find messages by specified search query (optional)</param>
    /// <param name="start">Return messages since specified timestamp only (optional)</param>
    /// <param name="end">Return messages up to specified timestamp only (optional)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetChatMessagesPaginatedResponse>> getChatMessages(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query,
        boost::optional<int32_t> start,
        boost::optional<int32_t> end,
        boost::optional<utility::string_t> direction,
        boost::optional<int32_t> voice
    );
    /// <summary>
    /// Get the details of a specific contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The contact id</param>
    pplx::task<std::shared_ptr<Contact>> getContact(
        int32_t id
    );
    /// <summary>
    /// Get the details of a specific contact by phone number
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="phone"></param>
    pplx::task<std::shared_ptr<Contact>> getContactByPhone(
        utility::string_t phone
    );
    /// <summary>
    /// Check is that phone number blocked
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="phone">Phone number to check</param>
    pplx::task<std::shared_ptr<Contact>> getContactIfBlocked(
        utility::string_t phone
    );
    /// <summary>
    /// Check import progress
    /// </summary>
    /// <remarks>
    /// Get contact import session progress.
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<GetContactImportSessionProgressResponse>> getContactImportSessionProgress(
        int32_t id
    );
    /// <summary>
    /// Get a contact note
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ContactNote>> getContactNote(
        int32_t id
    );
    /// <summary>
    /// Fetch notes assigned to the given contact.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetContactNotesPaginatedResponse>> getContactNotes(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get all contacts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetContactsPaginatedResponse>> getContacts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> shared,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get contacts autocomplete suggestions
    /// </summary>
    /// <remarks>
    /// Get contacts autocomplete suggestions by given search term
    /// </remarks>
    /// <param name="query">Find recipients by specified search query</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetContactsAutocompleteResponse>> getContactsAutocomplete(
        utility::string_t query,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> lists
    );
    /// <summary>
    /// Get all contacts in a list
    /// </summary>
    /// <remarks>
    /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
    /// </remarks>
    /// <param name="id">Given group Id.</param>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetContactsByListIdPaginatedResponse>> getContactsByListId(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get countries
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetCountriesResponse>> getCountries(
    );
    /// <summary>
    /// Get current account information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<User>> getCurrentUser(
    );
    /// <summary>
    /// Get the details of a specific custom field
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<UserCustomField>> getCustomField(
        int32_t id
    );
    /// <summary>
    /// Get all custom fields
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetCustomFieldsPaginatedResponse>> getCustomFields(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get the details of a specific dedicated number
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<UsersInbound>> getDedicatedNumber(
        int32_t id
    );
    /// <summary>
    /// Get favorite contacts and lists
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="query">Find contacts or lists by specified search query (optional)</param>
    pplx::task<std::shared_ptr<GetFavouritesPaginatedResponse>> getFavourites(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query
    );
    /// <summary>
    /// Get a single inbound message
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The unique numeric ID for the inbound message.</param>
    pplx::task<std::shared_ptr<MessageIn>> getInboundMessage(
        int32_t id
    );
    /// <summary>
    /// Get inbound messages notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<GetInboundMessagesNotificationSettingsResponse>> getInboundMessagesNotificationSettings(
    );
    /// <summary>
    /// Get all invoices
    /// </summary>
    /// <remarks>
    /// With the TextMagic API, you can check the invoices and transactions for your account.
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetInvoicesPaginatedResponse>> getInvoices(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get the details of a specific list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<List>> getList(
        int32_t id
    );
    /// <summary>
    /// Get all contacts IDs in a list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<GetListContactsIdsResponse>> getListContactsIds(
        int32_t id
    );
    /// <summary>
    /// Get all lists
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">The current fetched page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
    /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetListsPaginatedResponse>> getLists(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction,
        boost::optional<int32_t> favoriteOnly,
        boost::optional<int32_t> onlyMine
    );
    /// <summary>
    /// Get contact&#39;s lists
    /// </summary>
    /// <remarks>
    /// Get all the lists in which the contact is included
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetListsOfContactPaginatedResponse>> getListsOfContact(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Preview message
    /// </summary>
    /// <remarks>
    /// Get messages preview (with tags merged) up to 100 messages per session.
    /// </remarks>
    /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
    /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
    /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now. (optional)</param>
    /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone. (optional)</param>
    /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone. (optional)</param>
    /// <param name="contacts">Comma separated array of contact resources id message will be sent to. (optional)</param>
    /// <param name="lists">Comma separated array of list resources id message will be sent to. (optional)</param>
    /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to. (optional)</param>
    /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
    /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
    /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
    /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](http://docs.textmagictesting.com/#tag/Sender-IDs). (optional)</param>
    /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
    /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. (optional, default to 0)</param>
    /// <param name="tts">Send Text to Speech message. (optional, default to 0)</param>
    /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
    /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country. (optional)</param>
    pplx::task<std::shared_ptr<GetMessagePreviewResponse>> getMessagePreview(
        boost::optional<utility::string_t> text,
        boost::optional<int32_t> templateId,
        boost::optional<int32_t> sendingTime,
        boost::optional<utility::string_t> sendingDateTime,
        boost::optional<utility::string_t> sendingTimezone,
        boost::optional<utility::string_t> contacts,
        boost::optional<utility::string_t> lists,
        boost::optional<utility::string_t> phones,
        boost::optional<int32_t> cutExtra,
        boost::optional<int32_t> partsCount,
        boost::optional<int32_t> referenceId,
        boost::optional<utility::string_t> from,
        boost::optional<utility::string_t> rule,
        boost::optional<int32_t> createChat,
        boost::optional<int32_t> tts,
        boost::optional<int32_t> local,
        boost::optional<utility::string_t> localCountry
    );
    /// <summary>
    /// Check message price
    /// </summary>
    /// <remarks>
    /// Check pricing for a new outbound message.
    /// </remarks>
    /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
    /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
    /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
    /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now. (optional)</param>
    /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone. (optional)</param>
    /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone. (optional)</param>
    /// <param name="contacts">Comma separated array of contact resources id message will be sent to. (optional)</param>
    /// <param name="lists">Comma separated array of list resources id message will be sent to. (optional)</param>
    /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to. (optional)</param>
    /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
    /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
    /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
    /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](http://docs.textmagictesting.com/#tag/Sender-IDs). (optional)</param>
    /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
    /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. (optional, default to 0)</param>
    /// <param name="tts">Send Text to Speech message. (optional, default to 0)</param>
    /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
    /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country. (optional)</param>
    pplx::task<std::shared_ptr<GetMessagePriceResponse>> getMessagePrice(
        boost::optional<int32_t> includeBlocked,
        boost::optional<utility::string_t> text,
        boost::optional<int32_t> templateId,
        boost::optional<int32_t> sendingTime,
        boost::optional<utility::string_t> sendingDateTime,
        boost::optional<utility::string_t> sendingTimezone,
        boost::optional<utility::string_t> contacts,
        boost::optional<utility::string_t> lists,
        boost::optional<utility::string_t> phones,
        boost::optional<int32_t> cutExtra,
        boost::optional<int32_t> partsCount,
        boost::optional<int32_t> referenceId,
        boost::optional<utility::string_t> from,
        boost::optional<utility::string_t> rule,
        boost::optional<int32_t> createChat,
        boost::optional<int32_t> tts,
        boost::optional<int32_t> local,
        boost::optional<utility::string_t> localCountry
    );
    /// <summary>
    /// Get a session details
    /// </summary>
    /// <remarks>
    /// Get a specific session’s details
    /// </remarks>
    /// <param name="id">a session ID</param>
    pplx::task<std::shared_ptr<MessageSession>> getMessageSession(
        int32_t id
    );
    /// <summary>
    /// Get a session statistics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetMessageSessionStatResponse>> getMessageSessionStat(
        int32_t id,
        boost::optional<int32_t> includeDeleted
    );
    /// <summary>
    /// Get a session messages
    /// </summary>
    /// <remarks>
    /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="statuses">Find messages by status (optional)</param>
    /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetMessagesBySessionIdPaginatedResponse>> getMessagesBySessionId(
        int32_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> statuses,
        boost::optional<int32_t> includeDeleted
    );
    /// <summary>
    /// Get sent/received messages counters values
    /// </summary>
    /// <remarks>
    /// Get total contacts, sent messages and received messages counters values.
    /// </remarks>
    pplx::task<std::shared_ptr<GetMessagingCountersResponse>> getMessagingCounters(
    );
    /// <summary>
    /// Get messaging statistics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="by">*   **off** to get total values per specified time interval *   **day** to show values grouped by day *   **month** to show values grouped by month *   **year** to show values grouped by year  (optional, default to off)</param>
    /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
    /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
    pplx::task<std::shared_ptr<GetMessagingStatResponse>> getMessagingStat(
        boost::optional<utility::string_t> by,
        boost::optional<int32_t> start,
        boost::optional<int32_t> end
    );
    /// <summary>
    /// Get a single message
    /// </summary>
    /// <remarks>
    /// Get a single outgoing message.
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<MessageOut>> getOutboundMessage(
        int32_t id
    );
    /// <summary>
    /// Get history
    /// </summary>
    /// <remarks>
    /// Get outbound messages history.
    /// </remarks>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
    /// <param name="query">Find message by specified search query (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<GetOutboundMessagesHistoryPaginatedResponse>> getOutboundMessagesHistory(
        boost::optional<int32_t> limit,
        boost::optional<int32_t> lastId,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Get a single scheduled message
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<MessagesIcs>> getScheduledMessage(
        int32_t id
    );
    /// <summary>
    /// Get the details of a specific Sender ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<SenderId>> getSenderId(
        int32_t id
    );
    /// <summary>
    /// Get all your approved Sender IDs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetSenderIdsPaginatedResponse>> getSenderIds(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get current sender settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
    pplx::task<std::shared_ptr<GetSenderSettingsResponse>> getSenderSettings(
        boost::optional<utility::string_t> country
    );
    /// <summary>
    /// Get spending statistics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
    /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
    pplx::task<std::shared_ptr<GetSpendingStatPaginatedResponse>> getSpendingStat(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> start,
        boost::optional<utility::string_t> end
    );
    /// <summary>
    /// Get sub-account information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<User>> getSubaccount(
        int32_t id
    );
    /// <summary>
    /// Get sub-accounts list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<User>> getSubaccounts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get all sub-accounts with their REST API tokens associated with app name
    /// </summary>
    /// <remarks>
    /// Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
    /// </remarks>
    /// <param name="getSubaccountsWithTokensInputObject"></param>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetSubaccountsWithTokensResponse>> getSubaccountsWithTokens(
        std::shared_ptr<GetSubaccountsWithTokensInputObject> getSubaccountsWithTokensInputObject,
        boost::optional<double> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get a template details
    /// </summary>
    /// <remarks>
    /// Get a single template.
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<MessageTemplate>> getTemplate(
        int32_t id
    );
    /// <summary>
    /// Get timezones
    /// </summary>
    /// <remarks>
    /// Return all available timezone IDs
    /// </remarks>
    /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetTimezonesResponse>> getTimezones(
        boost::optional<int32_t> full
    );
    /// <summary>
    /// Get unread messages number
    /// </summary>
    /// <remarks>
    /// Get total amount of unread messages in the current user chats.
    /// </remarks>
    pplx::task<std::shared_ptr<GetUnreadMessagesTotalResponse>> getUnreadMessagesTotal(
    );
    /// <summary>
    /// Get the details of a specific unsubscribed contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<UnsubscribedContact>> getUnsubscribedContact(
        int32_t id
    );
    /// <summary>
    /// Get all unsubscribed contacts
    /// </summary>
    /// <remarks>
    /// When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed, use: 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    pplx::task<std::shared_ptr<GetUnsubscribersPaginatedResponse>> getUnsubscribers(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    );
    /// <summary>
    /// Get all your dedicated numbers
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
    pplx::task<std::shared_ptr<GetUserDedicatedNumbersPaginatedResponse>> getUserDedicatedNumbers(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> surveyId
    );
    /// <summary>
    /// Import contacts
    /// </summary>
    /// <remarks>
    /// Import contacts from the CSV, XLS or XLSX file.
    /// </remarks>
    /// <param name="file">File containing contacts in csv or xls(x) formats</param>
    /// <param name="column">Import file column mapping. String must contain substrings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where value before &#x60;:&#x60; is a number of column in file, value after &#x60;:&#x60; is a field of newly created contact or ID of custom field. Numbers of columns begins from zero. Allowed built-in contact fields: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. </param>
    /// <param name="listId">List ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)</param>
    /// <param name="listName">List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> importContacts(
        std::shared_ptr<HttpContent> file,
        utility::string_t column,
        boost::optional<int32_t> listId,
        boost::optional<utility::string_t> listName
    );
    /// <summary>
    /// Invite a new sub-account
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="inviteSubaccountInputObject"></param>
    pplx::task<void> inviteSubaccount(
        std::shared_ptr<InviteSubaccountInputObject> inviteSubaccountInputObject
    );
    /// <summary>
    /// Mark chats as read (bulk)
    /// </summary>
    /// <remarks>
    /// Mark several chats as read by chat ids or mark all chats as read
    /// </remarks>
    /// <param name="markChatsReadBulkInputObject"></param>
    pplx::task<void> markChatsReadBulk(
        std::shared_ptr<MarkChatsReadBulkInputObject> markChatsReadBulkInputObject
    );
    /// <summary>
    /// Mark chats as unread (bulk)
    /// </summary>
    /// <remarks>
    /// Mark several chats as UNread by chat ids or mark all chats as UNread
    /// </remarks>
    /// <param name="markChatsUnreadBulkInputObject"></param>
    pplx::task<void> markChatsUnreadBulk(
        std::shared_ptr<MarkChatsUnreadBulkInputObject> markChatsUnreadBulkInputObject
    );
    /// <summary>
    /// Mute chat sounds
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="muteChatInputObject"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> muteChat(
        std::shared_ptr<MuteChatInputObject> muteChatInputObject
    );
    /// <summary>
    /// Mute chats (bulk)
    /// </summary>
    /// <remarks>
    /// Mute several chats by chat ids or mute all chats
    /// </remarks>
    /// <param name="muteChatsBulkInputObject"></param>
    pplx::task<void> muteChatsBulk(
        std::shared_ptr<MuteChatsBulkInputObject> muteChatsBulkInputObject
    );
    /// <summary>
    /// Ping
    /// </summary>
    /// <remarks>
    /// Make a simple ping request
    /// </remarks>
    pplx::task<std::shared_ptr<PingResponse>> ping(
    );
    /// <summary>
    /// Reopen chats (bulk)
    /// </summary>
    /// <remarks>
    /// Reopen chats by chat ids or reopen all chats
    /// </remarks>
    /// <param name="reopenChatsBulkInputObject"></param>
    pplx::task<void> reopenChatsBulk(
        std::shared_ptr<ReopenChatsBulkInputObject> reopenChatsBulkInputObject
    );
    /// <summary>
    /// Request a new REST API token for sub-account
    /// </summary>
    /// <remarks>
    /// Returning user object, key and app name.
    /// </remarks>
    /// <param name="requestNewSubaccountTokenInputObject"></param>
    pplx::task<std::shared_ptr<User>> requestNewSubaccountToken(
        std::shared_ptr<RequestNewSubaccountTokenInputObject> requestNewSubaccountTokenInputObject
    );
    /// <summary>
    /// Apply for a new Sender ID
    /// </summary>
    /// <remarks>
    /// &gt; Sender IDs are shared between all of your sub-accounts.
    /// </remarks>
    /// <param name="requestSenderIdInputObject"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> requestSenderId(
        std::shared_ptr<RequestSenderIdInputObject> requestSenderIdInputObject
    );
    /// <summary>
    /// Find chats by message text
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="query">Find chats by specified search query (optional)</param>
    pplx::task<std::shared_ptr<SearchChatsPaginatedResponse>> searchChats(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query
    );
    /// <summary>
    /// Find chats (bulk)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="ids">Find chats by ID(s) (optional)</param>
    pplx::task<std::shared_ptr<SearchChatsByIdsPaginatedResponse>> searchChatsByIds(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> ids
    );
    /// <summary>
    /// Find chats by recipient
    /// </summary>
    /// <remarks>
    /// Find chats by recipient (contact, list name or phone number).
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="query">Find chats by specified search query (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    pplx::task<std::shared_ptr<SearchChatsByReceipentPaginatedResponse>> searchChatsByReceipent(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> orderBy
    );
    /// <summary>
    /// Find contacts by given criteria
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
    /// <param name="ids">Find contact by ID(s) (optional)</param>
    /// <param name="listId">Find contact by List ID (optional)</param>
    /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
    /// <param name="query">Find contacts by specified search query (optional)</param>
    /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
    /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<SearchContactsPaginatedResponse>> searchContacts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> shared,
        boost::optional<utility::string_t> ids,
        boost::optional<int32_t> listId,
        boost::optional<int32_t> includeBlocked,
        boost::optional<utility::string_t> query,
        boost::optional<int32_t> local,
        boost::optional<utility::string_t> country,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Find inbound messages
    /// </summary>
    /// <remarks>
    /// Find inbound messages by given parameters.
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="ids">Find message by ID(s) (optional)</param>
    /// <param name="query">Find recipients by specified search query (optional)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
    pplx::task<std::shared_ptr<SearchInboundMessagesPaginatedResponse>> searchInboundMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> ids,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction,
        boost::optional<int32_t> expand
    );
    /// <summary>
    /// Find lists by given criteria
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="ids">Find lists by ID(s) (optional)</param>
    /// <param name="query">Find lists by specified search query (optional)</param>
    /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
    /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<SearchListsPaginatedResponse>> searchLists(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> ids,
        boost::optional<utility::string_t> query,
        boost::optional<int32_t> onlyMine,
        boost::optional<int32_t> onlyDefault,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Find messages
    /// </summary>
    /// <remarks>
    /// Find outbound messages by given parameters.
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
    /// <param name="ids">Find message by ID(s) (optional)</param>
    /// <param name="sessionId">Find messages by session ID (optional)</param>
    /// <param name="statuses">Find messages by status (optional)</param>
    /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
    /// <param name="query">Find messages by specified search query (optional)</param>
    pplx::task<std::shared_ptr<SearchOutboundMessagesPaginatedResponse>> searchOutboundMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> lastId,
        boost::optional<utility::string_t> ids,
        boost::optional<int32_t> sessionId,
        boost::optional<utility::string_t> statuses,
        boost::optional<int32_t> includeDeleted,
        boost::optional<utility::string_t> query
    );
    /// <summary>
    /// Find scheduled messages
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="query">Find messages by specified search query (optional)</param>
    /// <param name="ids">Find schedules by ID(s) (optional)</param>
    /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
    /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
    /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
    pplx::task<std::shared_ptr<SearchScheduledMessagesPaginatedResponse>> searchScheduledMessages(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> query,
        boost::optional<utility::string_t> ids,
        boost::optional<utility::string_t> status,
        boost::optional<utility::string_t> orderBy,
        boost::optional<utility::string_t> direction
    );
    /// <summary>
    /// Find templates by criteria
    /// </summary>
    /// <remarks>
    /// Find user templates by given parameters.
    /// </remarks>
    /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
    /// <param name="limit">The number of results per page. (optional, default to 10)</param>
    /// <param name="ids">Find template by ID(s) (optional)</param>
    /// <param name="name">Find template by name (optional)</param>
    /// <param name="content">Find template by content (optional)</param>
    pplx::task<std::shared_ptr<SearchTemplatesPaginatedResponse>> searchTemplates(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> ids,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> content
    );
    /// <summary>
    /// Send message
    /// </summary>
    /// <remarks>
    /// The main entrypoint to send messages. See examples above for the reference.
    /// </remarks>
    /// <param name="sendMessageInputObject"></param>
    pplx::task<std::shared_ptr<SendMessageResponse>> sendMessage(
        std::shared_ptr<SendMessageInputObject> sendMessageInputObject
    );
    /// <summary>
    /// Step 1: Send a verification code 
    /// </summary>
    /// <remarks>
    /// Sends verification code to specified phone number.
    /// </remarks>
    /// <param name="sendPhoneVerificationCodeInputObject"></param>
    pplx::task<std::shared_ptr<SendPhoneVerificationCodeResponse>> sendPhoneVerificationCodeTFA(
        std::shared_ptr<SendPhoneVerificationCodeInputObject> sendPhoneVerificationCodeInputObject
    );
    /// <summary>
    /// Change chat status
    /// </summary>
    /// <remarks>
    /// Set status of the chat given by ID.
    /// </remarks>
    /// <param name="setChatStatusInputObject"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> setChatStatus(
        std::shared_ptr<SetChatStatusInputObject> setChatStatusInputObject
    );
    /// <summary>
    /// Unblock contact by phone number.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="unblockContactInputObject"></param>
    pplx::task<void> unblockContact(
        std::shared_ptr<UnblockContactInputObject> unblockContactInputObject
    );
    /// <summary>
    /// Unblock contacts (bulk)
    /// </summary>
    /// <remarks>
    /// Unblock several contacts by blocked contact ids or unblock all contacts
    /// </remarks>
    /// <param name="unblockContactsBulkInputObject"></param>
    pplx::task<void> unblockContactsBulk(
        std::shared_ptr<UnblockContactsBulkInputObject> unblockContactsBulkInputObject
    );
    /// <summary>
    /// Unmute chats (bulk)
    /// </summary>
    /// <remarks>
    /// Unmute several chats by chat ids or unmute all chats
    /// </remarks>
    /// <param name="unmuteChatsBulkInputObject"></param>
    pplx::task<void> unmuteChatsBulk(
        std::shared_ptr<UnmuteChatsBulkInputObject> unmuteChatsBulkInputObject
    );
    /// <summary>
    /// Manually unsubscribe a contact
    /// </summary>
    /// <remarks>
    /// &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
    /// </remarks>
    /// <param name="unsubscribeContactInputObject"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> unsubscribeContact(
        std::shared_ptr<UnsubscribeContactInputObject> unsubscribeContactInputObject
    );
    /// <summary>
    /// Update balance notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateBalanceNotificationSettingsInputObject"></param>
    pplx::task<void> updateBalanceNotificationSettings(
        std::shared_ptr<UpdateBalanceNotificationSettingsInputObject> updateBalanceNotificationSettingsInputObject
    );
    /// <summary>
    /// Update callback URL settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateCallbackSettingsInputObject"></param>
    pplx::task<void> updateCallbackSettings(
        std::shared_ptr<UpdateCallbackSettingsInputObject> updateCallbackSettingsInputObject
    );
    /// <summary>
    /// Update chat desktop notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
    pplx::task<void> updateChatDesktopNotificationSettings(
        std::shared_ptr<UpdateChatDesktopNotificationSettingsInputObject> updateChatDesktopNotificationSettingsInputObject
    );
    /// <summary>
    /// Edit a contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateContactInputObject"></param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateContact(
        std::shared_ptr<UpdateContactInputObject> updateContactInputObject,
        int32_t id
    );
    /// <summary>
    /// Update a contact note
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateContactNoteInputObject"></param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateContactNote(
        std::shared_ptr<UpdateContactNoteInputObject> updateContactNoteInputObject,
        int32_t id
    );
    /// <summary>
    /// Edit current account info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateCurrentUserInputObject"></param>
    pplx::task<std::shared_ptr<UpdateCurrentUserResponse>> updateCurrentUser(
        std::shared_ptr<UpdateCurrentUserInputObject> updateCurrentUserInputObject
    );
    /// <summary>
    /// Edit a custom field
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateCustomFieldInputObject"></param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateCustomField(
        std::shared_ptr<UpdateCustomFieldInputObject> updateCustomFieldInputObject,
        int32_t id
    );
    /// <summary>
    /// Edit the custom field value of a specified contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateCustomFieldValueInputObject"></param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateCustomFieldValue(
        std::shared_ptr<UpdateCustomFieldValueInputObject> updateCustomFieldValueInputObject,
        int32_t id
    );
    /// <summary>
    /// Update inbound messages notification settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
    pplx::task<void> updateInboundMessagesNotificationSettings(
        std::shared_ptr<UpdateInboundMessagesNotificationSettingsInputObject> updateInboundMessagesNotificationSettingsInputObject
    );
    /// <summary>
    /// Edit a list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="updateListObject"> (optional)</param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateList(
        int32_t id,
        boost::optional<std::shared_ptr<UpdateListObject>> updateListObject
    );
    /// <summary>
    /// Change sender settings
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateSenderSettingInputObject"></param>
    pplx::task<void> updateSenderSetting(
        std::shared_ptr<UpdateSenderSettingInputObject> updateSenderSettingInputObject
    );
    /// <summary>
    /// Update a template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTemplateInputObject"></param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> updateTemplate(
        std::shared_ptr<UpdateTemplateInputObject> updateTemplateInputObject,
        int32_t id
    );
    /// <summary>
    /// Upload an avatar
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
    pplx::task<void> uploadAvatar(
        std::shared_ptr<HttpContent> image
    );
    /// <summary>
    /// Upload an avatar
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> uploadContactAvatar(
        std::shared_ptr<HttpContent> image,
        int32_t id
    );
    /// <summary>
    /// Add an avatar for the list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ResourceLinkResponse>> uploadListAvatar(
        std::shared_ptr<HttpContent> image,
        int32_t id
    );
    /// <summary>
    /// Upload message attachment
    /// </summary>
    /// <remarks>
    /// Upload a new file to insert it as a link.
    /// </remarks>
    /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
    pplx::task<std::shared_ptr<UploadMessageAttachmentResponse>> uploadMessageAttachment(
        std::shared_ptr<HttpContent> file
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_TEXTMAGIC_CLIENT_API_TextMagicApi_H_ */

